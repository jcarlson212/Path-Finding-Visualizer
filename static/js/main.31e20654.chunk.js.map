{"version":3,"sources":["images/startnode.png","images/endnode.png","Cell.js","GridHelperFunctions.js","DataStructures.js","SearchAlgorithms.js","NavigationBar.js","Constants.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","white_grid_square","position","width","height","backgroundColor","borderWidth","borderColor","borderStyle","black_grid_square","green_grid_square","Cell","state","xCoord","props","yCoord","cellColor","isStartNode","isEndNode","clear","setState","markExplored","a","changeColor","isAClick","isMouseDown","mouseDown","onDragOver","event","preventDefault","handleDrop","console","log","endNodes","nodePressed","start_pressed","startNode","start_ref","end_pressed","endNode","end_ref","this","style","left","top","onMouseEnter","onClick","onDrop","src","startnode","alt","endnode","React","Component","hashCoord","isNaN","toString","Queue","items","item","push","isEmpty","shift","length","PriorityQueue","heapifyUp","index","Math","floor","temp","heapifyDown","removedItem","breadthFirstSearch","grid_map","start","end","speed","q","explored","undefined","currentNode","pop","x","y","newX","newY","setTimeout","breadthFirstSearchHelper","myDistance","abs","AStarSearch","current","currentDist","AStarSearchHelper","NavigationBar","isDragging","originalX","originalY","translateX","translateY","lastTranslateX","lastTranslateY","algorithm","clearBoard","i","CELLS_PER_ROW","j","CELLS_PER_COL","refs","startNodePressed","endNodePressed","run","endPoints","value","onChange","target","color","class","draggable","onDragStart","App","cells","grid_map_to_pass_down","endPointsForSearch","initial_cells","tempIndex","cell","grid","newCell","key","ref","className","onMouseDown","onMouseUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31e20654.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/startnode.6483a3b2.png\";","module.exports = __webpack_public_path__ + \"static/media/endnode.fd81001d.png\";","import React from 'react';\r\nimport startnode from \"./images/startnode.png\";\r\nimport endnode from \"./images/endnode.png\";\r\n\r\nexport const CELL_WIDTH = 50;\r\n\r\nconst white_grid_square = {\r\n    position: \"absolute\",\r\n    width: CELL_WIDTH,\r\n    height: CELL_WIDTH,\r\n    backgroundColor: 'white',\r\n    borderWidth: 1,\r\n    borderColor: 'black',\r\n    borderStyle: 'solid',\r\n}\r\n  \r\nconst black_grid_square = {\r\n    position: \"absolute\",\r\n    width: CELL_WIDTH,\r\n    height: CELL_WIDTH,\r\n    backgroundColor: 'black',\r\n    borderWidth: 5,\r\n    borderColor: 'black',\r\n    borderStyle: 'solid',\r\n}\r\n\r\nexport const green_grid_square = {\r\n    position: \"absolute\",\r\n    width: CELL_WIDTH,\r\n    height: CELL_WIDTH,\r\n    backgroundColor: 'green',\r\n    borderWidth: 5,\r\n    borderColor: 'black',\r\n    borderStyle: 'solid',\r\n}\r\n\r\nexport default class Cell extends React.Component {\r\n\r\n    state = {\r\n        xCoord: this.props.xCoord,\r\n        yCoord: this.props.yCoord,\r\n        cellColor: this.props.cellColor,\r\n        isStartNode: false,\r\n        isEndNode: false,\r\n    }\r\n\r\n    //Makes the cell white\r\n    clear = ()=>{\r\n        this.setState({\r\n            cellColor:\"white\",\r\n            xCoord: this.state.xCoord,\r\n            yCoord: this.state.yCoord,\r\n        })\r\n    }\r\n\r\n    //Makes the cell green\r\n    markExplored = async () => {\r\n        await this.setState({\r\n            ...this.state,\r\n            cellColor: \"green\",\r\n        })\r\n    }\r\n\r\n    //Handles changing from black to white and vice-versa.\r\n    changeColor = (isAClick) => {\r\n        if(this.props.isMouseDown.mouseDown === true || isAClick) {\r\n            if(this.state.cellColor === \"white\"){\r\n                this.setState({\r\n                    ...this.state,\r\n                    cellColor: \"black\"\r\n                });\r\n            }else if(this.state.cellColor === \"black\"){\r\n                this.setState({\r\n                    ...this.state,\r\n                    cellColor: \"white\"\r\n                });\r\n            }else{\r\n                this.setState({\r\n                    ...this.state,\r\n                    cellColor: \"white\"\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    //This is for some reason required for using the onDrop\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    //helps create a start or end node when a start / end node is dropped onto this cell\r\n    handleDrop = () => {\r\n        console.log(\"dropped\")\r\n        console.log(this.props.endNodes)\r\n        if(this.props.nodePressed.start_pressed){\r\n            this.props.endNodes.startNode = [this.state.xCoord, this.state.yCoord]\r\n            this.setState({\r\n                ...this.state,\r\n                isEndNode: false,\r\n                isStartNode: true,\r\n            })\r\n            if(this.props.endNodes.start_ref !== null) {\r\n                this.props.endNodes.start_ref.setState({\r\n                    ...this.props.endNodes.start_ref.state,\r\n                    isStartNode: false,\r\n                });\r\n                this.props.endNodes.start_ref = this \r\n            }else{\r\n                this.props.endNodes.start_ref = this \r\n            }\r\n            this.props.nodePressed.start_pressed = false\r\n        }else if(this.props.nodePressed.end_pressed){\r\n            this.props.endNodes.endNode = [this.state.xCoord, this.state.yCoord]\r\n            this.setState({\r\n                ...this.state,\r\n                isStartNode: false,\r\n                isEndNode: true,\r\n            })\r\n            if(this.props.endNodes.end_ref !== null) {\r\n                this.props.endNodes.end_ref.setState({\r\n                    ...this.props.endNodes.end_ref.state,\r\n                    isEndNode: false,\r\n                });\r\n                this.props.endNodes.end_ref = this \r\n            }else{\r\n                this.props.endNodes.end_ref = this \r\n            }\r\n            this.props.nodePressed.end_pressed = false\r\n        }\r\n    }\r\n\r\n    //renders a cell based on if it is a start node, end node, and its color.\r\n    render(){\r\n        if(!this.state.isStartNode){\r\n            if(!this.state.isEndNode){\r\n                return (\r\n                    <div style={\r\n                        (this.state.cellColor === \"white\") ?\r\n                            {\r\n                                ...white_grid_square,\r\n                                left: this.state.xCoord,\r\n                                top: this.state.yCoord,\r\n                            }\r\n                        :   \r\n                            (this.state.cellColor === \"green\") ?\r\n                            {\r\n                                ...green_grid_square,\r\n                                left: this.state.xCoord,\r\n                                top: this.state.yCoord,\r\n                            }\r\n                            :\r\n                            {\r\n                                ...black_grid_square,\r\n                                left: this.state.xCoord,\r\n                                top: this.state.yCoord,\r\n                            }\r\n                    } onMouseEnter={() => this.changeColor(false)} onClick={() => this.changeColor(true)} onDrop={() => {this.handleDrop()}} onDragOver={(event) => this.onDragOver(event)} >\r\n                    </div>\r\n                )\r\n            }else{\r\n                //is end node\r\n                return (\r\n                    <div \r\n                        style={\r\n                            {\r\n                                ...white_grid_square,\r\n                                left: this.state.xCoord,\r\n                                top: this.state.yCoord,\r\n                            }\r\n                        } \r\n                        onMouseEnter={() => this.changeColor(false)} \r\n                        onClick={() => this.changeColor(true)} \r\n                        onDrop={() => {this.handleDrop()}} \r\n                        onDragOver={(event) => this.onDragOver(event)}\r\n                        \r\n                    >\r\n                        <img src={endnode} width={CELL_WIDTH} height={CELL_WIDTH} alt=\"End\"></img>\r\n                    </div>\r\n                )\r\n            }\r\n            \r\n        }else{\r\n            //is start node\r\n            return (\r\n                <div \r\n                    style={\r\n                        {\r\n                            ...white_grid_square,\r\n                            left: this.state.xCoord,\r\n                            top: this.state.yCoord,\r\n                        }\r\n                    } \r\n                    onMouseEnter={() => this.changeColor(false)} \r\n                    onClick={() => this.changeColor(true)} \r\n                    onDrop={() => {this.handleDrop()}} \r\n                    onDragOver={(event) => this.onDragOver(event)}\r\n                    \r\n                >\r\n                    <img src={startnode} width={CELL_WIDTH} height={CELL_WIDTH} alt=\"Start\"></img>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}","//Returns a string to be used as a key in a dictionary\r\n//the string looks like \"xCoord,yCoord\"\r\nexport const hashCoord = (xCoord, yCoord) => {\r\n    if(isNaN(xCoord) || isNaN(yCoord)) {\r\n        return ',';\r\n    }\r\n    return xCoord.toString() +','+ yCoord.toString()\r\n}","\r\n\r\nexport class Queue {\r\n\r\n    constructor() {\r\n        this.items = []\r\n    }\r\n\r\n    push(item) {\r\n        this.items.push(item)\r\n    }\r\n\r\n    pop() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        return this.items.shift()\r\n    }\r\n\r\n    front() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        return this.items[0]\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0\r\n    }\r\n}\r\n\r\n\r\n//This is a min-heap. It assumes the elements pushed are a pair\r\n//where the first element in the pair is the actual node/element and the second\r\n//element in the pair is the value of that element (for heapifying)\r\nexport class PriorityQueue {\r\n    constructor() {\r\n        this.items = []\r\n    }\r\n\r\n    push(item) {\r\n        this.items.push(item)\r\n        console.log(item)\r\n        this.heapifyUp(this.items.length-1)\r\n    }\r\n\r\n    heapifyUp = (index) => {\r\n        if(index === 0) return\r\n        if(this.items[index][1] < this.items[Math.floor((index - 1 ) / 2)][1]) {\r\n            //move it up by swaping\r\n            const temp = this.items[index]\r\n            this.items[index] = this.items[Math.floor((index - 1 ) / 2)]\r\n            this.items[Math.floor((index - 1 ) / 2)] = temp\r\n\r\n            this.heapifyUp(Math.floor((index - 1 ) / 2))\r\n        }\r\n    }\r\n\r\n    heapifyDown = (index) => {\r\n        if(2*index +1 <= this.items.length -1){\r\n            //has left child\r\n            if(2*index+2 <= this.items.length-1){\r\n                //has right child and left child\r\n                if(this.items[2*index+1][1] < this.items[index][1]){\r\n                    if(this.items[2*index+2][1] < this.items[2*index+1][1]){\r\n                        //swap\r\n                        const temp = this.items[2*index+2]\r\n                        this.items[2*index+2] = this.items[index]\r\n                        this.items[index] = temp\r\n\r\n                        //recurse\r\n                        this.heapifyDown(2*index+2)\r\n                    }else{\r\n                            //swap\r\n                        const temp = this.items[2*index+1]\r\n                        this.items[2*index+1] = this.items[index]\r\n                        this.items[index] = temp\r\n\r\n                        //recurse\r\n                        this.heapifyDown(2*index+1)\r\n                    }\r\n                    \r\n                }else if(this.items[2*index+2][1] < this.items[index][1]){\r\n                    //swap\r\n                    const temp = this.items[2*index+2]\r\n                    this.items[2*index+2] = this.items[index]\r\n                    this.items[index] = temp\r\n\r\n                    //recurse\r\n                    this.heapifyDown(2*index+2)\r\n                }\r\n            }else{\r\n                //only has left child\r\n                if(this.items[2*index+1][1] < this.items[index][1]){\r\n                    //swap\r\n                    const temp = this.items[2*index+1]\r\n                    this.items[2*index+1] = this.items[index]\r\n                    this.items[index] = temp\r\n\r\n                    //recurse\r\n                    this.heapifyDown(2*index+1)\r\n                }\r\n            }\r\n        }else{\r\n            //has no children\r\n            return\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        \r\n\r\n        //maintain heap property\r\n        const temp = this.items[0]\r\n        this.items[0] = this.items[this.items.length-1]\r\n        this.items[this.items.length-1] = temp\r\n        \r\n        const removedItem = this.items[this.items.length-1]\r\n        this.items.length = this.items.length-1\r\n\r\n\r\n        this.heapifyDown(0)\r\n\r\n        return removedItem\r\n    }\r\n\r\n    front() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        return this.items[0]\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0\r\n    }\r\n}\r\n\r\nexport class Stack {\r\n    constructor() {\r\n        this.items = []\r\n    }\r\n\r\n    push(item) {\r\n        this.items.push(item)\r\n    }\r\n\r\n    pop() {\r\n        return this.items.pop()\r\n    }\r\n\r\n    top() {\r\n        return this.items[this.items.length - 1]\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0\r\n    }\r\n}","import { hashCoord } from './GridHelperFunctions';\r\nimport { Queue, PriorityQueue } from './DataStructures';\r\nimport { CELL_WIDTH } from './Cell';\r\n\r\nexport const breadthFirstSearch = (grid_map, start, end, speed) => {\r\n    //grid_map is an object mapping xcoord, ycoord pairs (made using the hash\r\n    //function in GridHelperFunctions.js) to Cell objects (a reference to the object)\r\n    //start is a starting cell coordinate (x,y)\r\n    //end is a ending cell coordinate (x,y)\r\n    //updates colors of cells manually as it explores them\r\n    console.log(\"running BFS\")\r\n    let q = new Queue();\r\n    q.push(start)\r\n    if (start === end) {\r\n        console.log(start, \"reached\", end)\r\n        return;\r\n    }\r\n    let explored = {}\r\n    explored[hashCoord(start[0], start[1])] = true\r\n    if (grid_map[hashCoord(start[0], start[1])] !== undefined) {\r\n        console.log(grid_map[hashCoord(start[0], start[1])])\r\n        grid_map[hashCoord(start[0], start[1])].markExplored()\r\n    }\r\n    if (!q.isEmpty()) {\r\n        const currentNode = q.pop()\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            breadthFirstSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n}\r\n\r\nconst breadthFirstSearchHelper = (grid_map, q, end, explored, speed) => {\r\n    if (!q.isEmpty()) {\r\n        const currentNode = q.pop()\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            breadthFirstSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n\r\n}\r\n\r\n// To be completed. Should be the same as breadth first search\r\n// except uses a stack instead of a queue. The stack does not have \r\n// a front() function - instead it uses peak.\r\nexport const depthFirstSearch = (grid_map, start, end, speed) => {\r\n    console.log(\"running DFS\");\r\n    var stack = [];\r\n    stack.push(start[0]);\r\n    if (end === start) {\r\n        console.log(start, \"reached\", end);\r\n        return;\r\n    }\r\n    let explored = {}\r\n    explored[hashCoord(start[0], start[1])] = true;\r\n\r\n    if (grid_map[hashCoord(start[0], start[1])] !== undefined) {\r\n        console.log(grid_map[hashCoord(start[0], start[1])])\r\n        grid_map[hashCoord(start[0], start[1])].markExplored()\r\n    } //wtf is this doing\r\n\r\n    if (stack.length !== 0) \r\n    {\r\n        const currentNode = stack.pop();\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\")\r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") \r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        console.log(\"stack became empty\")\r\n    }\r\n}\r\n\r\nconst myDistance = (start, end) => {\r\n    return Math.abs(end[1]-start[1]) + Math.abs(end[0] - start[0])\r\n}\r\n\r\nexport const AStarSearch = (grid_map, start, end, speed) => {\r\n    //grid_map is an object mapping xcoord, ycoord pairs (made using the hash\r\n    //function in GridHelperFunctions.js) to Cell objects (a reference to the object)\r\n    //start is a starting cell coordinate (x,y)\r\n    //end is a ending cell coordinate (x,y)\r\n    //updates colors of cells manually as it explores them\r\n    console.log(\"running BFS\")\r\n    let q = new PriorityQueue();\r\n    q.push([start, 0])\r\n    if (start === end) {\r\n        console.log(start, \"reached\", end)\r\n        return;\r\n    }\r\n    let explored = {}\r\n    explored[hashCoord(start[0], start[1])] = true\r\n    if (grid_map[hashCoord(start[0], start[1])] !== undefined) {\r\n        console.log(grid_map[hashCoord(start[0], start[1])])\r\n        grid_map[hashCoord(start[0], start[1])].markExplored()\r\n    }\r\n    if (!q.isEmpty()) {\r\n        const current = q.pop()\r\n        const currentNode = current[0]\r\n        const currentDist = current[1]\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            AStarSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n}\r\n\r\n\r\nconst AStarSearchHelper = (grid_map, q, end, explored, speed) => {\r\n    if (!q.isEmpty()) {\r\n        const current = q.pop()\r\n        const currentNode = current[0]\r\n        const currentDist = current[1]\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            AStarSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport startnode from \"./images/startnode.png\";\r\nimport endnode from \"./images/endnode.png\";\r\nimport './NavBar.css';\r\nimport { CELLS_PER_ROW, CELLS_PER_COL } from \"./App\";\r\nimport { hashCoord } from \"./GridHelperFunctions\";\r\nimport { breadthFirstSearch, AStarSearch } from \"./SearchAlgorithms\";\r\nimport { NORMAL, FAST, SLOW, ULTRA } from './Constants';\r\nimport { CELL_WIDTH } from './Cell';\r\n\r\n//There needs to be \r\n//1) A drop down list of algorithms\r\n//2) A button called Run to run the selected algorithm \r\n//3) the selected algorithm should be stored in the state\r\n//4) A button that takes them to a different page for seeing graph algorithms (for now the button\r\n// wont do anything, but it will be used for showing MST stuff instead of DFS and such)\r\n// There should also be a button for taking them to the current thing (so they can be called \r\n// Search Algorithms and Graph Algorithms respectively). There should also be a button called sorting \r\n//algorithms\r\n//5) There should be a square called start node that the user can click (and it should call a function that)\r\n// can do nothing at the moment. I am thinking like a green dot in the middle of a 50x50 square\r\n//6) similar a red node (a red dot)\r\n//7) After all of this (or before doing this) you can also do the animation of the cells changing color\r\nexport const NAVAGATION_BAR_HEIGHT = 100;\r\n\r\nexport class NavigationBar extends React.Component {\r\n    \r\n    state={\r\n        isDragging: false,\r\n\r\n        originalX: 0,\r\n        originalY: 0,\r\n\r\n        translateX: 0,\r\n        translateY: 0,\r\n\r\n        lastTranslateX: 0,\r\n        lastTranslateY: 0,\r\n        algorithm: \"algorithm\", \r\n        speed: \"Medium\",\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    clearBoard=()=>{\r\n        for(let i = 0; i < CELLS_PER_ROW; ++i){\r\n            for(let j =0; j < CELLS_PER_COL; ++j) {\r\n                let xCoord= 50*i\r\n                let yCoord= 50*j + NAVAGATION_BAR_HEIGHT\r\n                if (this.props.grid_map.refs[hashCoord(xCoord,yCoord)] !== undefined){\r\n                    this.props.grid_map.refs[hashCoord(xCoord,yCoord)].clear()\r\n                }\r\n            }           \r\n        }\r\n    }\r\n\r\n    startNodePressed = () => {\r\n        console.log(\"start node pressed\")\r\n        this.props.nodePressed.start_pressed = true\r\n        this.props.nodePressed.end_pressed = false\r\n    }\r\n\r\n    endNodePressed = () => {\r\n        console.log(\"end node pressed\")\r\n        this.props.nodePressed.end_pressed = true\r\n        this.props.nodePressed.start_pressed = false\r\n    }\r\n\r\n    run = () => {\r\n        console.log(this.state.speed);\r\n        if(this.state.speed === \"Medium\" || this.state.speed === \"Speed\" ){\r\n            if(this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, NORMAL)\r\n            }else{\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, NORMAL)\r\n            }\r\n    \r\n        }else if(this.state.speed === \"Fast\") {\r\n            if(this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, FAST)\r\n            }else{\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, FAST)\r\n            }\r\n        }else if(this.state.speed == \"Slow\"){\r\n            if(this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, SLOW)\r\n            }else{\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, SLOW)\r\n            }\r\n        }else{\r\n            if(this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, ULTRA)\r\n            }else{\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, ULTRA)\r\n            }\r\n        }\r\n    }\r\n        \r\n    render() {\r\n        return(\r\n            <div style={{ \r\n                width: '213%', \r\n                height: NAVAGATION_BAR_HEIGHT,\r\n                backgroundColor: \"rgb(23,213,213)\",\r\n            }}>\r\n            <div>\r\n                <a>Path Finding Visualizer</a>\r\n            </div>\r\n            <br/>          \r\n            <select value={this.state.algorithm} onChange={(event) => {\r\n                this.setState({\r\n                    ...this.state,\r\n                    algorithm: event.target.value\r\n                })\r\n            }}>\r\n                <option value=\"Algorithm\" style={{color: \"black\"}}>Algorithm</option>\r\n                <option value=\"A*\" style={{color: \"black\"}}>A*</option>\r\n                <option value=\"DFS\" style={{color: \"black\"}}>DFS</option>\r\n                <option value=\"BFS\" style={{color: \"black\"}}>BFS</option>\r\n            </select>\r\n            &nbsp;&nbsp;&nbsp;\r\n\r\n            <select value={this.state.speed} onChange={(event) => {\r\n                this.setState({\r\n                    ...this.state,\r\n                    speed: event.target.value\r\n                })\r\n            }}>\r\n                <option value=\"Speed\" style={{color: \"black\"}}>Speed</option>\r\n                <option value=\"Slow\" style={{color: \"black\"}}>Slow</option>\r\n                <option value=\"Medium\" style={{color: \"black\"}}>Medium</option>\r\n                <option value=\"Fast\" style={{color: \"black\"}}>Fast</option>\r\n                <option value=\"Ultra\" style={{color: \"black\"}}>Ultra</option>\r\n            </select>\r\n\r\n            &nbsp;&nbsp;&nbsp;<b>Drag to starting position:&nbsp;&nbsp;<button class=\"button button1\" draggable={true} onDragStart={() => { this.startNodePressed()}} ><img src={startnode} width=\"30\" height=\"30\"></img></button>\r\n            &nbsp;&nbsp;&nbsp;Drag to ending position:&nbsp;&nbsp;<button class=\"button button2\" draggable={true} onDragStart={() => { this.endNodePressed() }}><img src={endnode}width=\"40\"height=\"30\"/></button></b>\r\n\r\n\r\n            &nbsp;&nbsp;&nbsp;<button class=\"button button3\" onClick={() => { this.run() } }>Run</button>\r\n            &nbsp;&nbsp;&nbsp;<button class=\"button button4\" onClick={() => { this.clearBoard() }}>Clear Board</button>\r\n\r\n\r\n        </div>\r\n    );\r\n    }\r\n}","export const SLOW = 100;\r\nexport const NORMAL = 50;\r\nexport const FAST = 10;\r\nexport const ULTRA = 0;","import React from 'react';\r\nimport './App.css';\r\nimport Cell, { CELL_WIDTH } from './Cell';\r\nimport { NavigationBar, NAVAGATION_BAR_HEIGHT } from './NavigationBar';\r\nimport { hashCoord } from './GridHelperFunctions';\r\nimport { breadthFirstSearch } from './SearchAlgorithms';\r\n\r\nexport const CELLS_PER_ROW = 50;\r\nexport const CELLS_PER_COL = 50;\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    cells: [//this is just the positions of the cells\r\n      \r\n    ],\r\n    //should_re_render: true,\r\n    isMouseDown: {//This is passed to children. It handles the mousedown stuff for all of them. This avoids constant re-rendering.\r\n      mouseDown: false,\r\n    },\r\n    grid_map: {}, //this is for the search algorithms to run on\r\n    grid_map_to_pass_down: { //This is what gets passed to children (like nav bar) to initially run the search algorithms\r\n      refs: {//every ref has a key which maps it to an actual cell class.\r\n\r\n      },\r\n    },\r\n    nodePressed: {\r\n      start_pressed: false,\r\n      end_pressed: false,\r\n    },\r\n    endPointsForSearch: {\r\n      startNode: [200, 100],\r\n      endNode: [300, 800],\r\n      start_ref: null,\r\n      end_ref: null,\r\n    },\r\n  }\r\n\r\n  //Defines the coordinates of where cells will eventually be rendered / placed when initialized\r\n  constructor() {\r\n    super()\r\n    const initial_cells = []\r\n\r\n    for(let i = 0; i < CELLS_PER_ROW; ++i){\r\n      for(let j =0; j < CELLS_PER_COL; ++j) {\r\n        initial_cells.push({\r\n          xCoord: 50*i,\r\n          yCoord: 50*j + NAVAGATION_BAR_HEIGHT,\r\n        })\r\n      }\r\n    }\r\n    this.state = {\r\n      ...this.state,\r\n      cells: initial_cells\r\n    };\r\n  }\r\n\r\n  //Here we get refs to all of the cells so that we can change their color and mark them with\r\n  //our search algorithms\r\n  componentDidMount(){\r\n    let i= 0\r\n    for (i = 0; i < this.state.cells.length; i++) {\r\n      const tempIndex = i\r\n      const cell = this.state.cells[tempIndex]\r\n      this.state.grid_map[hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])] = this.refs[hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])]\r\n      \r\n    }\r\n    this.state.grid_map_to_pass_down.refs = this.state.grid_map\r\n  }\r\n\r\n\r\n  //renders a Navigation bar and a grid of cells.\r\n  render() {\r\n    console.log(\"main render called\")\r\n    const grid = []\r\n    let grid_map = {} //this is used for bfs/dfs/search algorithms\r\n    let i = 0\r\n    for (i = 0; i < this.state.cells.length; i++) {\r\n      const tempIndex = i\r\n      const cell = this.state.cells[tempIndex]\r\n      let newCell = <Cell xCoord={cell[\"xCoord\"]} yCoord={cell[\"yCoord\"]} cellColor=\"white\" key={i} isMouseDown={ this.state.isMouseDown } ref={hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])} nodePressed={this.state.nodePressed} endNodes={this.state.endPointsForSearch} />\r\n      grid.push(newCell)\r\n      grid_map = {\r\n        ...grid_map,\r\n        [hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])]: this.refs[hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])] //initially, these refs are null (have to be mounted for some reason)\r\n      }\r\n    }\r\n    this.state.grid_map = grid_map\r\n    this.state.grid_map_to_pass_down.refs = this.state.grid_map\r\n\r\n    return (\r\n      <div style={{ height: '2600px' }}>\r\n        <NavigationBar  grid_map={this.state.grid_map_to_pass_down} nodePressed={ this.state.nodePressed } endPoints={this.state.endPointsForSearch}/>\r\n        <div className=\"App\" onMouseDown={() => { this.state.isMouseDown.mouseDown = true }} onMouseUp={() => { this.state.isMouseDown.mouseDown = false }} endPoints={this.state.endPointsForSearch}>\r\n          {grid}\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}