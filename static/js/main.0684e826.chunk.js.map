{"version":3,"sources":["images/startnode.png","images/endnode.png","Search/Cell.js","Search/Constants.js","Search/GridHelperFunctions.js","DataStructures.js","Search/SearchAlgorithms.js","Search/NavigationBar.js","Search/Search.js","Sort/Stick.js","Sort/SortingAlgorithms.js","Sort/Constants.js","Sort/SortNavigationBar.js","Sort/Sort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","white_grid_square","position","width","height","backgroundColor","borderWidth","borderColor","borderStyle","black_grid_square","Green_grid_squareKeyFrames","keyframes","Green_grid_square","styled","div","props","left","top","Black_grid_squareKeyFrames","Cell","state","xCoord","yCoord","cellColor","isStartNode","isEndNode","clear","setState","markExplored","a","changeColor","isAClick","isMouseDown","mouseDown","onDragOver","event","preventDefault","handleDrop","nodePressed","start_pressed","endNodes","startNode","start_ref","end_pressed","endNode","end_ref","create_start_node","style","onMouseEnter","onClick","onDrop","src","startnode","alt","create_end_node","endnode","create_white_node","create_green_node","create_black_node","render","React","Component","hashCoord","isNaN","toString","Queue","this","items","item","push","isEmpty","shift","length","PriorityQueue","heapifyUp","index","Math","floor","temp","heapifyDown","console","log","removedItem","Stack","pop","breadthFirstSearch","grid_map","start","end","speed","q","explored","undefined","currentNode","x","y","newX","newY","setTimeout","breadthFirstSearchHelper","depthFirstSearch","stack","depthFirstSearchHelper","myDistance","abs","AStarSearch","current","currentDist","AStarSearchHelper","NavigationBar","isDragging","originalX","originalY","translateX","translateY","lastTranslateX","lastTranslateY","algorithm","clearBoard","i","CELLS_PER_ROW","j","CELLS_PER_COL","refs","changeScreen","change_screen","startNodePressed","endNodePressed","run","endPoints","change_algorithm","type","change_speed","new_speed","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","className","Brand","NavDropdown","marginLeft","marginRight","title","Item","OverlayTrigger","key","placement","overlay","Tooltip","class","draggable","onDragStart","Button","variant","Search","cells","grid_map_to_pass_down","endPointsForSearch","initial_cells","tempIndex","cell","grid","newCell","ref","onMouseDown","onMouseUp","Stick","color","changeHeight","newHeight","newColor","changeXCoord","newXCoord","xPosition","changeYCoord","newYCoord","sleep","ms","Promise","resolve","radixSortAlgorithm","largest_bit","audio","Audio","volume","play","loop","buckets","bucket0_index","bucket1_index","pause","mergeSortAlgorithm","Object","keys","temp2","mid","merge","start1","end1","start2","end2","tempArr","current1","current2","val","quickSortAlgorithm","max","pivot_index","random","pivot_height","left_bucket","right_bucket","SortNavigationBar","sort","sortSpeed","parentRef","componentDidMount","parent","mergeSort","radixSort","quickSort","change_sort_algorithm","sorty","change_sort_speed","speedy","beginSort","switch_screen","Sort","sticks","generate_sticks","yPosition","display","map","stick","App","screen","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0684e826.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/startnode.6483a3b2.png\";","module.exports = __webpack_public_path__ + \"static/media/endnode.fd81001d.png\";","import React from 'react';\r\nimport startnode from \"../images/startnode.png\";\r\nimport endnode from \"../images/endnode.png\";\r\nimport '../App.css'; //styles\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { CELL_WIDTH } from './Constants';\r\n\r\n\r\nconst white_grid_square = {\r\n    position: \"absolute\",\r\n    width: CELL_WIDTH,\r\n    height: CELL_WIDTH,\r\n    backgroundColor: 'white',\r\n    borderWidth: 1,\r\n    borderColor: 'black',\r\n    borderStyle: 'solid',\r\n}\r\n\r\nconst black_grid_square = {\r\n    position: \"absolute\",\r\n    width: CELL_WIDTH,\r\n    height: CELL_WIDTH,\r\n    backgroundColor: 'black',\r\n    borderWidth: 5,\r\n    borderColor: 'black',\r\n    borderStyle: 'solid',\r\n}\r\n\r\nconst Green_grid_squareKeyFrames = keyframes`\r\n    0% {\r\n        background-color: silver;\r\n    }\r\n    50% {\r\n        background-color: mint;\r\n    }\r\n    100% {\r\n        background-color: lime;\r\n    }\r\n`;\r\n\r\n\r\nconst Green_grid_square = styled.div`\r\n    position: absolute;\r\n    width: ${CELL_WIDTH}px;\r\n    height: ${CELL_WIDTH}px;\r\n    background-color: lime;\r\n    border-width: 1px;\r\n    border-color: black;\r\n    border-style: solid;\r\n    animation-name: ${Green_grid_squareKeyFrames};\r\n    animation-duration: 2s;\r\n    animation-timing-function: ease-out;\r\n    left: ${props => props.left}px;\r\n    top: ${props => props.top}px;\r\n`;\r\n\r\n\r\nconst Black_grid_squareKeyFrames = keyframes`\r\n    0% {\r\n        transform: scale(.3);\r\n        background-color: silver;\r\n        border-radius: 100%;\r\n    }\r\n    100% {\r\n        background-color: black;\r\n    }\r\n`;\r\n\r\n\r\nconst Black_grid_square = styled.div`\r\n    position: absolute;\r\n    width: ${CELL_WIDTH}px;\r\n    height: ${CELL_WIDTH}px;\r\n    background-color: black;\r\n    border-width: 1px;\r\n    border-color: black;\r\n    border-style: solid;\r\n    animation-timing-function: ease-out;\r\n    animation-name: ${Black_grid_squareKeyFrames};\r\n    animation-duration: .5s;\r\n    left: ${props => props.left}px;\r\n    top: ${props => props.top}px;\r\n`;\r\n\r\nexport default class Cell extends React.Component {\r\n\r\n    state = {\r\n        xCoord: this.props.xCoord,\r\n        yCoord: this.props.yCoord,\r\n        cellColor: this.props.cellColor,\r\n        isStartNode: false,\r\n        isEndNode: false,\r\n    }\r\n\r\n    //Makes the cell white\r\n    clear = () => {\r\n        this.setState({\r\n            cellColor: \"white\",\r\n            xCoord: this.state.xCoord,\r\n            yCoord: this.state.yCoord,\r\n        })\r\n    }\r\n\r\n\r\n    //Makes the cell green\r\n    markExplored = async () => {\r\n        await this.setState({\r\n            ...this.state,\r\n            cellColor: \"green\",\r\n        })\r\n    }\r\n\r\n    //Handles changing from black to white and vice-versa.\r\n    changeColor = (isAClick) => {\r\n        if (this.props.isMouseDown.mouseDown === true || isAClick) {\r\n            if (this.state.cellColor === \"white\") {\r\n                this.setState({\r\n                    ...this.state,\r\n                    cellColor: \"black\"\r\n                });\r\n            } else if (this.state.cellColor === \"black\") {\r\n                this.setState({\r\n                    ...this.state,\r\n                    cellColor: \"white\"\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    ...this.state,\r\n                    cellColor: \"white\"\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    //This is for some reason required for using the onDrop\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    //helps create a start or end node when a start / end node is dropped onto this cell\r\n    handleDrop = () => {\r\n        if (this.props.nodePressed.start_pressed) {\r\n            this.props.endNodes.startNode = [this.state.xCoord, this.state.yCoord]\r\n            this.setState({\r\n                ...this.state,\r\n                isEndNode: false,\r\n                isStartNode: true,\r\n            })\r\n            if (this.props.endNodes.start_ref !== null) {\r\n                this.props.endNodes.start_ref.setState({\r\n                    ...this.props.endNodes.start_ref.state,\r\n                    isStartNode: false,\r\n                });\r\n                this.props.endNodes.start_ref = this\r\n            } else {\r\n                this.props.endNodes.start_ref = this\r\n            }\r\n            this.props.nodePressed.start_pressed = false\r\n        } else if (this.props.nodePressed.end_pressed) {\r\n            this.props.endNodes.endNode = [this.state.xCoord, this.state.yCoord]\r\n            this.setState({\r\n                ...this.state,\r\n                isStartNode: false,\r\n                isEndNode: true,\r\n            })\r\n            if (this.props.endNodes.end_ref !== null) {\r\n                this.props.endNodes.end_ref.setState({\r\n                    ...this.props.endNodes.end_ref.state,\r\n                    isEndNode: false,\r\n                });\r\n                this.props.endNodes.end_ref = this\r\n            } else {\r\n                this.props.endNodes.end_ref = this\r\n            }\r\n            this.props.nodePressed.end_pressed = false\r\n        }\r\n    }\r\n\r\n    create_start_node = () => (\r\n        <div\r\n            style={\r\n                {\r\n                    ...white_grid_square,\r\n                    left: this.state.xCoord,\r\n                    top: this.state.yCoord,\r\n                }\r\n            }\r\n            onMouseEnter={() => this.changeColor(false)}\r\n            onClick={() => this.changeColor(true)}\r\n            onDrop={() => { this.handleDrop() }}\r\n            onDragOver={(event) => this.onDragOver(event)}\r\n\r\n        >\r\n            <img src={startnode} width={CELL_WIDTH} height={CELL_WIDTH} alt=\"Start\"></img>\r\n        </div>\r\n    );\r\n\r\n    create_end_node = () => (\r\n        <div\r\n            style={\r\n                {\r\n                    ...white_grid_square,\r\n                    left: this.state.xCoord,\r\n                    top: this.state.yCoord,\r\n                }\r\n            }\r\n            onMouseEnter={() => this.changeColor(false)}\r\n            onClick={() => this.changeColor(true)}\r\n            onDrop={() => { this.handleDrop() }}\r\n            onDragOver={(event) => this.onDragOver(event)}\r\n\r\n        >\r\n            <img src={endnode} width={CELL_WIDTH} height={CELL_WIDTH} alt=\"End\"></img>\r\n        </div>\r\n    )\r\n\r\n    create_white_node = () => (\r\n        <div style={\r\n            {\r\n                ...white_grid_square,\r\n                left: this.state.xCoord,\r\n                top: this.state.yCoord,\r\n            }\r\n        } onMouseEnter={() => this.changeColor(false)} onClick={() => this.changeColor(true)} onDrop={() => { this.handleDrop() }} onDragOver={(event) => this.onDragOver(event)}>\r\n\r\n        </div>\r\n    )\r\n\r\n    create_green_node = () => (\r\n        <Green_grid_square\r\n            onMouseEnter={() => this.changeColor(false)}\r\n            onClick={() => this.changeColor(true)}\r\n            onDrop={() => { this.handleDrop() }}\r\n            onDragOver={(event) => this.onDragOver(event)}\r\n            left={this.state.xCoord}\r\n            top={this.state.yCoord}\r\n        />\r\n    )\r\n\r\n    create_black_node = () => (\r\n        <div style={\r\n            {\r\n                ...black_grid_square,\r\n                left: this.state.xCoord,\r\n                top: this.state.yCoord,\r\n            }\r\n        } onMouseEnter={() => this.changeColor(false)} onClick={() => this.changeColor(true)} onDrop={() => { this.handleDrop() }} onDragOver={(event) => this.onDragOver(event)}>\r\n\r\n        </div>\r\n    )\r\n    \r\n\r\n    //renders a cell based on if it is a start node, end node, and its color.\r\n    render = () => {\r\n        if (!this.state.isStartNode) {\r\n            if (!this.state.isEndNode) {\r\n                if (this.state.cellColor === 'white') {\r\n                    return this.create_white_node();\r\n                } else if (this.state.cellColor === 'green') {\r\n                    return this.create_green_node();\r\n                } else if (this.state.cellColor === 'black') {\r\n                    return this.create_black_node();\r\n                }\r\n            } else {\r\n                //is end node\r\n                return this.create_end_node();\r\n            }\r\n        }else {\r\n            //is a start node cell\r\n            return this.create_start_node();\r\n        }\r\n    }\r\n}","export const NAVIGATION_BAR_HEIGHT = 70;\r\nexport const CELL_WIDTH = 50;\r\nexport const CELLS_PER_ROW = 35;\r\nexport const CELLS_PER_COL = 35;\r\nexport const SLOW = 100;\r\nexport const NORMAL = 50;\r\nexport const FAST = 10;\r\nexport const ULTRA = 0;","//Returns a string to be used as a key in a dictionary\r\n//the string looks like \"xCoord,yCoord\"\r\nexport const hashCoord = (xCoord, yCoord) => {\r\n    if(isNaN(xCoord) || isNaN(yCoord)) {\r\n        return ',';\r\n    }\r\n    return xCoord.toString() +','+ yCoord.toString()\r\n}","\r\n\r\nexport class Queue {\r\n\r\n    constructor() {\r\n        this.items = []\r\n    }\r\n\r\n    push(item) {\r\n        this.items.push(item)\r\n    }\r\n\r\n    pop() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        return this.items.shift()\r\n    }\r\n\r\n    front() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        return this.items[0]\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0\r\n    }\r\n}\r\n\r\n\r\n//This is a min-heap. It assumes the elements pushed are a pair\r\n//where the first element in the pair is the actual node/element and the second\r\n//element in the pair is the value of that element (for heapifying)\r\nexport class PriorityQueue {\r\n    constructor() {\r\n        this.items = []\r\n    }\r\n\r\n    push(item) {\r\n        this.items.push(item)\r\n        console.log(item)\r\n        this.heapifyUp(this.items.length-1)\r\n    }\r\n\r\n    heapifyUp = (index) => {\r\n        if(index === 0) return\r\n        if(this.items[index][1] < this.items[Math.floor((index - 1 ) / 2)][1]) {\r\n            //move it up by swaping\r\n            const temp = this.items[index]\r\n            this.items[index] = this.items[Math.floor((index - 1 ) / 2)]\r\n            this.items[Math.floor((index - 1 ) / 2)] = temp\r\n\r\n            this.heapifyUp(Math.floor((index - 1 ) / 2))\r\n        }\r\n    }\r\n\r\n    heapifyDown = (index) => {\r\n        if(2*index +1 <= this.items.length -1){\r\n            //has left child\r\n            if(2*index+2 <= this.items.length-1){\r\n                //has right child and left child\r\n                if(this.items[2*index+1][1] < this.items[index][1]){\r\n                    if(this.items[2*index+2][1] < this.items[2*index+1][1]){\r\n                        //swap\r\n                        const temp = this.items[2*index+2]\r\n                        this.items[2*index+2] = this.items[index]\r\n                        this.items[index] = temp\r\n\r\n                        //recurse\r\n                        this.heapifyDown(2*index+2)\r\n                    }else{\r\n                            //swap\r\n                        const temp = this.items[2*index+1]\r\n                        this.items[2*index+1] = this.items[index]\r\n                        this.items[index] = temp\r\n\r\n                        //recurse\r\n                        this.heapifyDown(2*index+1)\r\n                    }\r\n                    \r\n                }else if(this.items[2*index+2][1] < this.items[index][1]){\r\n                    //swap\r\n                    const temp = this.items[2*index+2]\r\n                    this.items[2*index+2] = this.items[index]\r\n                    this.items[index] = temp\r\n\r\n                    //recurse\r\n                    this.heapifyDown(2*index+2)\r\n                }\r\n            }else{\r\n                //only has left child\r\n                if(this.items[2*index+1][1] < this.items[index][1]){\r\n                    //swap\r\n                    const temp = this.items[2*index+1]\r\n                    this.items[2*index+1] = this.items[index]\r\n                    this.items[index] = temp\r\n\r\n                    //recurse\r\n                    this.heapifyDown(2*index+1)\r\n                }\r\n            }\r\n        }else{\r\n            //has no children\r\n            return\r\n        }\r\n    }\r\n\r\n    pop() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        \r\n\r\n        //maintain heap property\r\n        const temp = this.items[0]\r\n        this.items[0] = this.items[this.items.length-1]\r\n        this.items[this.items.length-1] = temp\r\n        \r\n        const removedItem = this.items[this.items.length-1]\r\n        this.items.length = this.items.length-1\r\n\r\n\r\n        this.heapifyDown(0)\r\n\r\n        return removedItem\r\n    }\r\n\r\n    front() {\r\n        if(this.isEmpty()){\r\n            return null\r\n        }\r\n        return this.items[0]\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0\r\n    }\r\n}\r\n\r\nexport class Stack {\r\n    constructor() {\r\n        this.items = []\r\n    }\r\n\r\n    push(item) {\r\n        this.items.push(item)\r\n    }\r\n\r\n    pop() {\r\n        return this.items.pop()\r\n    }\r\n\r\n    top() {\r\n        return this.items[this.items.length - 1]\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.items.length === 0\r\n    }\r\n}","import { hashCoord } from './GridHelperFunctions';\r\nimport { Queue, Stack, PriorityQueue } from '../DataStructures';\r\nimport { CELL_WIDTH } from './Constants';\r\n\r\nexport const breadthFirstSearch = (grid_map, start, end, speed) => {\r\n    //grid_map is an object mapping xcoord, ycoord pairs (made using the hash\r\n    //function in GridHelperFunctions.js) to Cell objects (a reference to the object)\r\n    //start is a starting cell coordinate (x,y)\r\n    //end is a ending cell coordinate (x,y)\r\n    //updates colors of cells manually as it explores them\r\n    let q = new Queue();\r\n    q.push(start)\r\n    if (start === end) {\r\n        return;\r\n    }\r\n    let explored = {}\r\n    explored[hashCoord(start[0], start[1])] = true\r\n    if (grid_map[hashCoord(start[0], start[1])] !== undefined) {\r\n        grid_map[hashCoord(start[0], start[1])].markExplored()\r\n    }\r\n    if (!q.isEmpty()) {\r\n        const currentNode = q.pop()\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            breadthFirstSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n}\r\n\r\nconst breadthFirstSearchHelper = (grid_map, q, end, explored, speed) => {\r\n    if (!q.isEmpty()) {\r\n        const currentNode = q.pop()\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = \r\n                    {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n       \r\n        setTimeout(function () \r\n        {\r\n            breadthFirstSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n    \r\n}\r\n\r\n// To be completed. Should be the same as breadth first search\r\n// except uses a stack instead of a queue. The stack does not have \r\n// a front() function - instead it uses peak.\r\nexport const depthFirstSearch = (grid_map, start, end, speed) => \r\n{\r\n    console.log(\"running DFS\");\r\n    var stack = new Stack();\r\n    stack.push(start);\r\n    if (end === start) \r\n    {\r\n        console.log(start, \"reached\", end);\r\n        return;\r\n    }\r\n    let explored = {}\r\n    explored[hashCoord(start[0], start[1])] = true;\r\n\r\n    if (grid_map[hashCoord(start[0], start[1])] !== undefined)\r\n    {\r\n        console.log(grid_map[hashCoord(start[0], start[1])])\r\n        grid_map[hashCoord(start[0], start[1])].markExplored()\r\n    } //wtf is this doing\r\n\r\n    if (stack.length !== 0) \r\n    {\r\n        const currentNode = stack.pop();\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\")\r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") \r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () \r\n        {\r\n            depthFirstSearchHelper(grid_map, stack, end, explored, speed)\r\n        }, speed);\r\n    }\r\n    else\r\n    {\r\n        console.log(\"stack became empty\")\r\n    }\r\n}\r\nconst depthFirstSearchHelper = (grid_map, stack, end, explored, speed) => \r\n{\r\n    if (!stack.isEmpty()) \r\n    {\r\n        const currentNode = stack.pop()\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") \r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = \r\n                    {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") \r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = \r\n                    {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\")\r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = \r\n                    {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) \r\n        {\r\n            if (!(hashCoord(x, y) in explored)) \r\n            {\r\n                const newX = x\r\n                const newY = y\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\")\r\n                {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    stack.push([newX, newY]);\r\n                    explored = \r\n                    {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) \r\n                {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () \r\n        {\r\n            depthFirstSearchHelper(grid_map, stack, end, explored, speed)\r\n        }, speed);\r\n    } \r\n    else \r\n    {\r\n        console.log(\"stack became empty\")\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst myDistance = (start, end) => {\r\n    return Math.abs(end[1]-start[1]) + Math.abs(end[0] - start[0])\r\n}\r\n\r\nexport const AStarSearch = (grid_map, start, end, speed) => {\r\n    //grid_map is an object mapping xcoord, ycoord pairs (made using the hash\r\n    //function in GridHelperFunctions.js) to Cell objects (a reference to the object)\r\n    //start is a starting cell coordinate (x,y)\r\n    //end is a ending cell coordinate (x,y)\r\n    //updates colors of cells manually as it explores them\r\n    console.log(\"running BFS\")\r\n    let q = new PriorityQueue();\r\n    q.push([start, 0])\r\n    if (start === end) {\r\n        console.log(start, \"reached\", end)\r\n        return;\r\n    }\r\n    let explored = {}\r\n    explored[hashCoord(start[0], start[1])] = true\r\n    if (grid_map[hashCoord(start[0], start[1])] !== undefined) {\r\n        console.log(grid_map[hashCoord(start[0], start[1])])\r\n        grid_map[hashCoord(start[0], start[1])].markExplored()\r\n    }\r\n    if (!q.isEmpty()) {\r\n        const current = q.pop()\r\n        const currentNode = current[0]\r\n        const currentDist = current[1]\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(start, \"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            AStarSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n}\r\n\r\n\r\nconst AStarSearchHelper = (grid_map, q, end, explored, speed) => {\r\n    if (!q.isEmpty()) {\r\n        const current = q.pop()\r\n        const currentNode = current[0]\r\n        const currentDist = current[1]\r\n        let x = currentNode[0] + CELL_WIDTH;\r\n        let y = currentNode[1];\r\n\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0] - CELL_WIDTH;\r\n        y = currentNode[1];\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] + CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        x = currentNode[0];\r\n        y = currentNode[1] - CELL_WIDTH;\r\n        if (hashCoord(x, y) in grid_map) {\r\n            //it exists\r\n            //check if it has been explored\r\n            if (!(hashCoord(x, y) in explored)) {\r\n                //we explore it since it has not been found\r\n                const newX = x\r\n                const newY = y\r\n\r\n                //make some visual effects here later\r\n                if (grid_map[hashCoord(newX, newY)] !== undefined && grid_map[hashCoord(newX, newY)].state.cellColor !== \"black\") {\r\n                    grid_map[hashCoord(newX, newY)].markExplored()\r\n                    q.push([[newX, newY], currentDist + myDistance([newX, newY], end)]);\r\n                    explored = {\r\n                        ...explored,\r\n                        [hashCoord(newX, newY)]: true,\r\n                    }\r\n                }\r\n                if (newX === end[0] && newY === end[1]) {\r\n                    console.log(\"reached\", end)\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        setTimeout(function () {\r\n            AStarSearchHelper(grid_map, q, end, explored, speed)\r\n        }, speed);\r\n\r\n    } else {\r\n        console.log(\"queue became empty\")\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport startnode from \"../images/startnode.png\";\r\nimport endnode from \"../images/endnode.png\";\r\nimport './NavBar.css';\r\nimport { CELLS_PER_ROW, CELLS_PER_COL } from \"../App\";\r\nimport { hashCoord } from \"./GridHelperFunctions\";\r\nimport { breadthFirstSearch, AStarSearch, depthFirstSearch } from \"./SearchAlgorithms\";\r\nimport { NORMAL, FAST, SLOW, ULTRA, NAVIGATION_BAR_HEIGHT } from './Constants';\r\n\r\nexport class NavigationBar extends React.Component{\r\n    \r\n    state = {\r\n        isDragging: false,\r\n\r\n        originalX: 0,\r\n        originalY: 0,\r\n\r\n        translateX: 0,\r\n        translateY: 0,\r\n\r\n        lastTranslateX: 0,\r\n        lastTranslateY: 0,\r\n        algorithm: \"BFS\",\r\n        speed: \"Medium\",\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    clearBoard = () => {\r\n        for (let i = 0; i < CELLS_PER_ROW; ++i) {\r\n            for (let j = 0; j < CELLS_PER_COL; ++j) {\r\n                let xCoord = 50 * i\r\n                let yCoord = 50 * j + NAVIGATION_BAR_HEIGHT\r\n                if (this.props.grid_map.refs[hashCoord(xCoord, yCoord)] !== undefined) {\r\n                    this.props.grid_map.refs[hashCoord(xCoord, yCoord)].clear()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    changeScreen = () => {\r\n        this.props.change_screen();\r\n    }\r\n\r\n    startNodePressed = () => {\r\n        this.props.nodePressed.start_pressed = true\r\n        this.props.nodePressed.end_pressed = false\r\n    }\r\n\r\n    endNodePressed = () => {\r\n        this.props.nodePressed.end_pressed = true\r\n        this.props.nodePressed.start_pressed = false\r\n    }\r\n\r\n    run = () => {\r\n        if (this.state.speed === \"Medium\" || this.state.speed === \"Speed\") {\r\n            if (this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, NORMAL)\r\n            } else if (this.state.algorithm === \"DFS\") {\r\n                depthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, NORMAL)\r\n            } else {\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, NORMAL)\r\n            }\r\n        } else if (this.state.speed === \"Fast\") {\r\n            if (this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, FAST)\r\n            } else if (this.state.algorithm === \"DFS\") {\r\n                depthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, FAST)\r\n            } else {\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, FAST)\r\n            }\r\n        } else if (this.state.speed === \"Slow\") {\r\n            if (this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, SLOW)\r\n            } else if (this.state.algorithm === \"DFS\") {\r\n                depthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, SLOW)\r\n            } else {\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, SLOW)\r\n            }\r\n        } else {\r\n            if (this.state.algorithm === \"A*\") {\r\n                AStarSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, ULTRA)\r\n            } else if (this.state.algorithm === \"DFS\") {\r\n                depthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, ULTRA)\r\n            } else {\r\n                breadthFirstSearch(this.props.grid_map.refs, this.props.endPoints.startNode, this.props.endPoints.endNode, ULTRA)\r\n            }\r\n        }\r\n    }\r\n\r\n    change_algorithm = (type) => {\r\n        this.setState({\r\n            ...this.state,\r\n            algorithm: type\r\n        })\r\n    }\r\n\r\n    change_speed = (new_speed) => {\r\n        this.setState({\r\n            ...this.state,\r\n            speed: new_speed\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"testing\">\r\n                        <Navbar.Brand className=\"testing2\">Path Finding Visualizer</Navbar.Brand>\r\n                        <NavDropdown style={{ width: 100, marginLeft: 5, marginRight: 5 }} title={this.state.algorithm} id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={ () => this.change_algorithm(\"A*\") }>A*</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_algorithm(\"DFS\") }>DFS</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_algorithm(\"BFS\") }>BFS</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        \r\n                        <NavDropdown style={{ width: 100, marginLeft: 5, marginRight: 5 }} title={this.state.speed} id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={ () => this.change_speed(\"Slow\") }>Slow</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_speed(\"Medium\") }>Medium</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_speed(\"Fast\") }>Fast</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_speed(\"Ultra\") }>Ultra</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        <OverlayTrigger\r\n                            key={0}\r\n                            placement='bottom'\r\n                            overlay={\r\n                                <Tooltip id={`start`}>\r\n                                Drag to starting position\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <button class=\"button button1\" draggable={true} onDragStart={() => { this.startNodePressed() }} ><img src={startnode} width=\"30\" height=\"30\"></img></button>\r\n                        </OverlayTrigger>\r\n                        <OverlayTrigger\r\n                            key={1}\r\n                            placement={'bottom'}\r\n                            overlay={\r\n                                <Tooltip id={`end`}>\r\n                                Drag to ending position\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <button class=\"button button2\" draggable={true} onDragStart={() => { this.endNodePressed() }}><img src={endnode} width=\"40\" height=\"30\" /></button>\r\n                        </OverlayTrigger>\r\n                        <Button style={{ marginLeft: 10, marginRight: 10 }} variant=\"dark\" onClick={() => { this.run() }}>Run</Button>\r\n                        &nbsp;&nbsp;<Button style={{ marginLeft: 10, marginRight: 10 }} variant=\"dark\" onClick={() => { this.clearBoard() }}>Clear Board</Button>\r\n                        &nbsp;&nbsp;<Button style={{ marginLeft: 10, marginRight: 10 }} variant=\"dark\" onClick={() => { this.changeScreen() }}>Sorting Algorithms</Button>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        ) \r\n    }\r\n};","import React from 'react';\r\nimport '../App.css';\r\nimport Cell from './Cell';\r\nimport { NavigationBar } from './NavigationBar';\r\nimport { hashCoord } from './GridHelperFunctions';\r\nimport { CELLS_PER_COL, CELLS_PER_ROW, CELL_WIDTH, NAVIGATION_BAR_HEIGHT } from './Constants';\r\n\r\nclass Search extends React.Component {\r\n\r\n  \r\n\r\n  state = {\r\n    cells: [//this is just the positions of the cells\r\n      \r\n    ],\r\n    //should_re_render: true,\r\n    isMouseDown: {//This is passed to children. It handles the mousedown stuff for all of them. This avoids constant re-rendering.\r\n      mouseDown: false,\r\n    },\r\n    grid_map: {}, //this is for the search algorithms to run on\r\n    grid_map_to_pass_down: { //This is what gets passed to children (like nav bar) to initially run the search algorithms\r\n      refs: {//every ref has a key which maps it to an actual cell class.\r\n\r\n      },\r\n    },\r\n    nodePressed: {\r\n      start_pressed: false,\r\n      end_pressed: false,\r\n    },\r\n    endPointsForSearch: {\r\n      startNode: [200, 100],\r\n      endNode: [300, 800],\r\n      start_ref: null,\r\n      end_ref: null,\r\n    },\r\n  }\r\n\r\n  //Defines the coordinates of where cells will eventually be rendered / placed when initialized\r\n  constructor() {\r\n    super()\r\n    const initial_cells = []\r\n\r\n    for(let i = 0; i < CELLS_PER_ROW; ++i){\r\n      for(let j =0; j < CELLS_PER_COL; ++j) {\r\n        initial_cells.push({\r\n          xCoord: 50*i,\r\n          yCoord: 50*j + NAVIGATION_BAR_HEIGHT,\r\n        })\r\n      }\r\n    }\r\n    this.state = {\r\n      ...this.state,\r\n      cells: initial_cells\r\n    };\r\n  }\r\n\r\n  //Here we get refs to all of the cells so that we can change their color and mark them with\r\n  //our search algorithms\r\n  componentDidMount(){\r\n    let i= 0\r\n    for (i = 0; i < this.state.cells.length; i++) {\r\n      const tempIndex = i\r\n      const cell = this.state.cells[tempIndex]\r\n      this.state.grid_map[hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])] = this.refs[hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])]\r\n      \r\n    }\r\n    this.state.grid_map_to_pass_down.refs = this.state.grid_map\r\n  }\r\n\r\n\r\n  //renders a Navigation bar and a grid of cells.\r\n  render() {\r\n    const grid = []\r\n    let grid_map = {} //this is used for bfs/dfs/search algorithms\r\n    let i = 0\r\n    for (i = 0; i < this.state.cells.length; i++) {\r\n      const tempIndex = i\r\n      const cell = this.state.cells[tempIndex]\r\n      let newCell = <Cell xCoord={cell[\"xCoord\"]} yCoord={cell[\"yCoord\"]} cellColor=\"white\" key={i} isMouseDown={ this.state.isMouseDown } ref={hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])} nodePressed={this.state.nodePressed} endNodes={this.state.endPointsForSearch} />\r\n      grid.push(newCell)\r\n      grid_map = {\r\n        ...grid_map,\r\n        [hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])]: this.refs[hashCoord(cell[\"xCoord\"], cell[\"yCoord\"])] //initially, these refs are null (have to be mounted for some reason)\r\n      }\r\n    }\r\n    this.state.grid_map = grid_map\r\n    this.state.grid_map_to_pass_down.refs = this.state.grid_map\r\n\r\n    return (\r\n      <div style={{ height: (CELLS_PER_COL*CELL_WIDTH + NAVIGATION_BAR_HEIGHT) }}>\r\n        <NavigationBar  grid_map={this.state.grid_map_to_pass_down} nodePressed={ this.state.nodePressed } endPoints={this.state.endPointsForSearch} change_screen={() => this.props.change_screen()}/>\r\n        <div className=\"App\" onMouseDown={() => { this.state.isMouseDown.mouseDown = true }} onMouseUp={() => { this.state.isMouseDown.mouseDown = false }} endPoints={this.state.endPointsForSearch}>\r\n          {grid}\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n  \r\n}\r\n\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nclass Stick extends React.Component {\r\n    state = {\r\n        height: this.props.height,\r\n        width: this.props.width,\r\n        color: this.props.color,\r\n    }\r\n\r\n    changeHeight = (newHeight) => {\r\n        this.setState({\r\n            ...this.state,\r\n            height: newHeight,\r\n        })\r\n    }\r\n\r\n    changeColor = (newColor) => {\r\n        this.setState({\r\n            ...this.state,\r\n            color: newColor,\r\n        })\r\n    }\r\n\r\n    changeXCoord = (newXCoord) => {\r\n        this.setState({\r\n            ...this.state,\r\n            xPosition: newXCoord\r\n        })\r\n    }\r\n\r\n    changeYCoord = (newYCoord) => {\r\n        this.setState({\r\n            ...this.state,\r\n            xPosition: newYCoord\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                height: this.state.height,\r\n                width: ((this.state.width.toString()) + \"%\"),\r\n                backgroundColor: this.state.color,\r\n            }}>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Stick;","import { VOLUME } from './Constants';\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\n//The refs are used to sort between and should hold sticks. The largest bit is the largest\r\n//bit of the heights of the sticks in their binary expansion\r\nexport const radixSortAlgorithm = async (refs, start, end, speed, largest_bit) => {\r\n    const audio = new Audio(\"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/theme_01.mp3\");\r\n    audio.volume = VOLUME;\r\n    audio.play()\r\n    audio.loop = true\r\n\r\n    let buckets = {\r\n        '0': [],\r\n        '1': [],\r\n    }\r\n\r\n    let i;\r\n    for(i = 0; i <= largest_bit; i++){\r\n        let j =start\r\n        while(j <= end){\r\n            if((refs[j].state.height >> i) & 1 === 1){\r\n                buckets[\"1\"].push(refs[j].state.height)\r\n            }else{\r\n                buckets[\"0\"].push(refs[j].state.height)\r\n            }\r\n            j++;\r\n        }\r\n\r\n        j = start\r\n        let bucket0_index = 0\r\n        let bucket1_index = 0\r\n        while(j <= end){\r\n            if(bucket0_index < buckets[\"0\"].length){\r\n                refs[j].changeHeight(buckets[\"0\"][bucket0_index])\r\n                bucket0_index++\r\n                refs[j].changeColor(\"red\")\r\n                await sleep(speed);\r\n                refs[j].changeColor(\"black\")\r\n            }else{\r\n                refs[j].changeHeight(buckets[\"1\"][bucket1_index])\r\n                bucket1_index++\r\n                refs[j].changeColor(\"red\")\r\n                await sleep(speed);\r\n                refs[j].changeColor(\"black\")\r\n            }\r\n            j++;\r\n        }\r\n\r\n        buckets[\"0\"] = []\r\n        buckets[\"1\"] = []\r\n    }\r\n\r\n    audio.pause()\r\n}\r\n\r\nexport const mergeSortAlgorithm = async (refs, start, end, speed) => {\r\n    let audio;\r\n    if(start === 0 && end === Object.keys(refs).length - 1){\r\n        audio = new Audio(\"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/theme_01.mp3\");\r\n        audio.volume = VOLUME;\r\n        audio.play()\r\n        audio.loop = true\r\n    }\r\n    \r\n    if(start >= end){\r\n        return;\r\n    }else if(start === (end - 1)){\r\n        if(refs[start].state.height > refs[end].state.height){\r\n            const temp = refs[start].state.height\r\n            const temp2 = refs[end].state.height\r\n            refs[start].changeHeight(temp2)\r\n            await sleep(speed);\r\n            refs[end].changeHeight(temp)\r\n            await sleep(speed);\r\n        }\r\n        return;\r\n    }\r\n\r\n    const mid = Math.floor((start + end) / 2)\r\n    //n + (n/2 + n/2) + (n/4 + n/4 + ... + n/4) +...  = log_{2}(n)*n\r\n    await mergeSortAlgorithm(refs, start, mid, speed)\r\n    await mergeSortAlgorithm(refs, mid+1, end, speed)\r\n    await merge(refs, start, mid, mid+1, end, speed)\r\n\r\n    if(start === 0 && end === Object.keys(refs).length - 1){\r\n        audio.pause()\r\n    }\r\n}\r\n\r\nconst merge = async (refs, start1, end1, start2, end2, speed) => {\r\n    let tempArr = []\r\n    let current1 = start1\r\n    let current2 = start2\r\n    while(current1 <= end1 && current2 <= end2){\r\n        if(refs[current1].state.height <= refs[current2].state.height){\r\n            const val = refs[current1].state.height;\r\n            tempArr.push(val)\r\n            current1++\r\n        }else{\r\n            const val = refs[current2].state.height;\r\n            tempArr.push(val)\r\n            current2++\r\n        }\r\n    }\r\n\r\n    while(current1 <= end1){\r\n        tempArr.push(refs[current1].state.height)\r\n        current1++\r\n    }\r\n    while(current2 <= end2){\r\n        tempArr.push(refs[current2].state.height)\r\n        current2++\r\n    }\r\n\r\n    for(let i = start1; i <= end2; i++){\r\n        refs[i].changeHeight(tempArr[(i - start1)])\r\n        refs[i].changeColor(\"red\")\r\n        await sleep(speed);\r\n        refs[i].changeColor(\"black\")\r\n        await sleep(speed);\r\n    }\r\n}\r\n\r\nexport const quickSortAlgorithm = async (refs, start, end, speed) => {\r\n    let audio;\r\n    if(start === 0 && end === Object.keys(refs).length - 1){\r\n        audio = new Audio(\"http://codeskulptor-demos.commondatastorage.googleapis.com/GalaxyInvaders/theme_01.mp3\");\r\n        audio.volume = VOLUME;\r\n        audio.play()\r\n        audio.loop = true\r\n    }\r\n\r\n    if(start >= end){\r\n        return;\r\n    }else if(start === (end - 1)){\r\n        if(refs[start].state.height > refs[end].state.height){\r\n            const temp = refs[start].state.height\r\n            const temp2 = refs[end].state.height\r\n            refs[start].changeHeight(temp2)\r\n            await sleep(speed);\r\n            refs[end].changeHeight(temp)\r\n            await sleep(speed);\r\n        }\r\n        return;\r\n    }\r\n    \r\n    const pivot_index = getRandomInt(end - start+1) + start\r\n    const pivot_height = refs[pivot_index].state.height\r\n    const left_bucket = []\r\n    const right_bucket = []\r\n    let i;\r\n    for(i=start; i <= end; i++){\r\n        if(i != pivot_index){\r\n            if(refs[i].state.height <= refs[pivot_index].state.height){\r\n                left_bucket.push(refs[i].state.height)\r\n            }else{\r\n                right_bucket.push(refs[i].state.height)\r\n            }\r\n        }\r\n    }\r\n    //SortingAlgorithms.js:167 0 499 135 364 130\r\n    for(let i = start; i <= start + left_bucket.length-1; i++){\r\n        refs[i].changeHeight(left_bucket[i-start])\r\n        refs[i].changeColor(\"red\")\r\n        await sleep(speed);\r\n        refs[i].changeColor(\"black\")\r\n        await sleep(speed);\r\n    }\r\n    \r\n    refs[start+left_bucket.length].changeHeight(pivot_height)\r\n    refs[start+left_bucket.length].changeColor(\"red\")\r\n    await sleep(speed);\r\n    refs[start+left_bucket.length].changeColor(\"black\")\r\n    await sleep(speed);\r\n    for(let i = start+left_bucket.length+1; i <= end; i++){\r\n        refs[i].changeHeight(right_bucket[i-(start +left_bucket.length+1)])\r\n        refs[i].changeColor(\"red\")\r\n        await sleep(speed);\r\n        refs[i].changeColor(\"black\")\r\n        await sleep(speed);\r\n    }\r\n\r\n\r\n    await quickSortAlgorithm(refs, start, start+left_bucket.length-1, speed)\r\n    await quickSortAlgorithm(refs, start+left_bucket.length+1, end, speed)\r\n\r\n    if(start === 0 && end === Object.keys(refs).length - 1){\r\n        audio.pause()\r\n    }\r\n}\r\n\r\n/*\r\nexport const bubbleSortAlgo = async (z, zz) => {\r\n    if (z === zz) {\r\n        return;\r\n    }\r\n    else if (z === (zz - 1)) {\r\n        //????\r\n    }\r\n}\r\n\r\n//basic bubble sort todo: change heights\r\n\r\nconst bubble = async (swap) => {\r\n    let initial = arrayTest => {\r\n        let arrayTestSize = arrayTest.length;\r\n        let swap;\r\n        do {\r\n            swap = false;\r\n            for (let i = 0; i < arrayTestSize; i++) \r\n            {\r\n                if (arrayTest[i] > arrayTest[i + 1]) \r\n                {\r\n                    let tempArray = arrayTest[i];\r\n                    arrayTest[i] = arrayTest[i + 1];\r\n                    arrayTest[i + 1] = tempArray;\r\n                    swap = true;\r\n                }\r\n            }\r\n        }\r\n        while (swap);\r\n        return arrayTest;\r\n    }\r\n}\r\n*/","export const NUMBER_OF_STICKS = 500;\r\nexport const MAX_STICK_HEIGHT = 800;\r\nexport const SORT_NAVIGATION_BAR_HEIGHT = 100;\r\nexport const VOLUME = .1;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { mergeSortAlgorithm, radixSortAlgorithm, quickSortAlgorithm } from './SortingAlgorithms'\r\nimport './NavBarSort.css';\r\nimport { SORT_NAVIGATION_BAR_HEIGHT } from './Constants';\r\n\r\nexport default class SortNavigationBar extends React.Component {\r\n\r\n    state = {\r\n        sort: \"Merge Sort\",\r\n        sortSpeed: \"Slow\",\r\n        parentRef: {\r\n            refs: {\r\n\r\n            }\r\n        },\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.state.parentRef = this.props.parent()\r\n    }\r\n\r\n    mergeSort = () => {\r\n        const refs = this.state.parentRef.refs\r\n        mergeSortAlgorithm(refs, 0, Object.keys(refs).length - 1, 0)\r\n    }\r\n\r\n    radixSort = () => {\r\n        const refs = this.state.parentRef.refs\r\n        radixSortAlgorithm(refs, 0, Object.keys(refs).length - 1, 0, 9)\r\n    }\r\n\r\n    quickSort = () => {\r\n        const refs = this.state.parentRef.refs\r\n        quickSortAlgorithm(refs, 0, Object.keys(refs).length - 1, 0)\r\n    }\r\n    change_sort_algorithm = (sorty) => {\r\n        this.setState({\r\n            ...this.state,\r\n            sort: sorty\r\n        })\r\n    }\r\n    change_sort_speed = (speedy) => {\r\n        this.setState({\r\n            ...this.state,\r\n            sortSpeed: speedy\r\n        })\r\n    }\r\n    beginSort = () => {\r\n        if (this.state.sort === \"Merge Sort\") {\r\n            console.log(\"state is merge\")\r\n            //state is merge\r\n            this.mergeSort()\r\n        }\r\n        else if (this.state.sort === \"Bubble Sort\") {\r\n            console.log(\"state is bubbly\")\r\n            //state is bubble\r\n        }else if (this.state.sort === \"Radix Sort\"){\r\n            this.radixSort()\r\n        }\r\n        else {\r\n            console.log(\"state is quickly sorting\")\r\n            //state is quick\r\n            this.quickSort()\r\n        }\r\n    }\r\n\r\n    switch_screen = () => {\r\n        this.props.change_screen();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"testing\">\r\n                        <Navbar.Brand className=\"testing3\">Sorting Algorithms</Navbar.Brand>\r\n                        <NavDropdown className=\"testing4\" style={{ width: 100, marginLeft: 5, marginRight: 15 }} title={this.state.sort} id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_algorithm(\"Merge Sort\") }>Merge Sort</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_algorithm(\"Bubble Sort\") }>Bubble Sort</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_algorithm(\"Radix Sort\") }>Radix Sort</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_algorithm(\"Quick Sort\") }>Quick Sort</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        \r\n                        <NavDropdown className=\"testing5\" style={{ width: 100, marginLeft: 15, marginRight: 5 }} title={this.state.sortSpeed} id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_speed(\"Slow\") }>Slow</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_speed(\"Medium\") }>Medium</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_speed(\"Fast\") }>Fast</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={ () => this.change_sort_speed(\"Ultra\") }>Ultra</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        \r\n                        <Button style={{ marginLeft: 10, marginRight: 10 }} variant=\"dark\" onClick={() => { this.beginSort() }}>Sort</Button>\r\n                        <Button style={{ marginLeft: 10, marginRight: 10 }} variant=\"dark\" onClick={() => { this.switch_screen() }}>Search Algorithms</Button>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Stick from './Stick';\r\nimport SortNavigationBar from './SortNavigationBar';\r\nimport { NUMBER_OF_STICKS, MAX_STICK_HEIGHT, SORT_NAVIGATION_BAR_HEIGHT } from './Constants';\r\n\r\n//Sorting algorithm screen component\r\n//Loads sticks with random height and navigation bar\r\nclass Sort extends React.Component {\r\n\r\n    state = {\r\n        sticks: [\r\n\r\n        ],\r\n        \r\n    }\r\n\r\n    generate_sticks = () => {\r\n        for(let i =0; i < NUMBER_OF_STICKS; ++i){\r\n            const p = i;\r\n            this.state.sticks.push({\r\n                color: \"black\",\r\n                height: Math.floor(Math.random()*MAX_STICK_HEIGHT),\r\n                width: (1 / NUMBER_OF_STICKS)*100,\r\n                xPosition: i,\r\n                yPosition: SORT_NAVIGATION_BAR_HEIGHT\r\n            })\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super()\r\n        this.generate_sticks()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.state.refs = this.refs\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SortNavigationBar parent={() => this} change_screen={() => this.props.change_screen()} />\r\n                <div style={{height: MAX_STICK_HEIGHT, display: \"flex\"}}>\r\n                    {this.state.sticks.map((stick, index) => <Stick color={stick.color} height={stick.height} width={stick.width} xPosition={stick.xPosition} yPosition={stick.yPosition} ref={index.toString()} key={index} />)}\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Sort;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Search from './Search/Search';\r\nimport Sort from './Sort/Sort';\r\n\r\nexport const CELLS_PER_ROW = 50;\r\nexport const CELLS_PER_COL = 50;\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    screen: \"search\"\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  changeScreen = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      screen: (this.state.screen === \"search\") ? \"sort\" : \"search\"\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {(this.state.screen === \"search\") ? <Search change_screen={() => this.changeScreen() }/> : <Sort change_screen={() => this.changeScreen() }/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}